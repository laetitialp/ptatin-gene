


/*
  Auto generated by version 0.0 of swarm_class_generator.py
  on geop-043.ethz.ch, at 2012-02-14 21:01:55.587101 by dmay
*/


#ifndef __QPntVolCoefStokes_DEF_H__
#define __QPntVolCoefStokes_DEF_H__

typedef struct {
  double eta ;
  double rho ;
  double Fu [ 3 ] ;
  double Fp ;
} QPntVolCoefStokes ;


typedef enum {
  QPVCStk_eta_effective = 0,
  QPVCStk_rho_effective,
  QPVCStk_momentum_rhs,
  QPVCStk_continuity_rhs
} QPntVolCoefStokesTypeName ;


extern const char QPntVolCoefStokes_classname[];

extern const int QPntVolCoefStokes_nmembers;

extern const size_t QPntVolCoefStokes_member_sizes[];

extern const char *QPntVolCoefStokes_member_names[];

/* prototypes */
void QPntVolCoefStokesGetField_eta_effective(QPntVolCoefStokes *point,double *data);
void QPntVolCoefStokesGetField_rho_effective(QPntVolCoefStokes *point,double *data);
void QPntVolCoefStokesGetField_momentum_rhs(QPntVolCoefStokes *point,double *data[]);
void QPntVolCoefStokesGetField_continuity_rhs(QPntVolCoefStokes *point,double *data);
void QPntVolCoefStokesSetField_eta_effective(QPntVolCoefStokes *point,double data);
void QPntVolCoefStokesSetField_rho_effective(QPntVolCoefStokes *point,double data);
void QPntVolCoefStokesSetField_momentum_rhs(QPntVolCoefStokes *point,double data[]);
void QPntVolCoefStokesSetField_continuity_rhs(QPntVolCoefStokes *point,double data);
void QPntVolCoefStokesView(QPntVolCoefStokes *point);
void QPntVolCoefStokesVTKWriteAsciiAllFields(FILE *vtk_fp,const int N,const QPntVolCoefStokes points[]);
void QPntVolCoefStokesPVTUWriteAllPPointDataFields(FILE *vtk_fp);
void QPntVolCoefStokesVTKWriteBinaryAppendedHeaderAllFields(FILE *vtk_fp,int *offset,const int N,const QPntVolCoefStokes points[]);
void QPntVolCoefStokesVTKWriteBinaryAppendedDataAllFields(FILE *vtk_fp,const int N,const QPntVolCoefStokes points[]);

#endif
