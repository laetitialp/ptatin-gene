
import os
import socket
import sys
import time
import datetime



def write_out_c_class_externdefs( ParticleClass, ParticleClassShortName, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list ):

	#check length
	L = len(variable_name_list);
	if L != len(variable_type_list):
		print 'ERROR: length variable_name_list[] != variable_name_list[]'
	if L != len(variable_textural_name_list):
		print 'ERROR: length variable_textural_name_list[] != variable_name_list[]'
	

	print '\n\n\n#error(<<REMOVED AUTOGENERATED TAG>> ================== FILE ['+ParticleClass+'_def.c] ==================)'

	# comment
	now = datetime.datetime.now()
	print '/*'
	print '  Auto generated by version 0.0 of material_constant_generator.py'
	print '  on '+ socket.gethostname() +', at '+str(now)+' by '+os.getenv('USER')
	print '*/\n\n'


	print '#include <stdio.h>'
	print '#include <string.h>'
	print '#include <stdlib.h>\n'
	print '#include "'+ParticleClass+'_def.h"\n\n'

	# generate classname
	print 'const char '+ParticleClass+'_classname[] = "'+ParticleClass+'";\n'
	

	# strings and constant stuff #
	print 'const int ' + ParticleClass +'_nmembers = ' + str(L) + ';\n'
	
	
	# sizes #
	l = 'const size_t ' + ParticleClass +'_member_sizes[] = {'
	print l
	for f in xrange(L):
		l = '  ' + str(variable_extend_list[f])  + ' * sizeof(' + str(variable_type_list[f]) +')'
		if f < L-1:
			l = l + ','
		print l
	print '} ;\n'
	

	# string names #
	l = 'const char *' + ParticleClass +'_member_names[] = {'
	print l
	for f in xrange(L):
		l = '  ' + '"' + variable_textural_name_list[f] + '"'
		if f < L-1:
			l = l + ','
		print l
		
	l = '} ;\n'
	print l



def write_out_getters( prototype, ParticleClass, ParticleClassShortName, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list ):

	#check length
	L = len(variable_name_list);

	# comment
	if prototype == 'False':
		print '\n/* ===================================== */'
		print '/* Getters for '+ParticleClass+' */'
		print '/* ===================================== */'

	for f in xrange(L):

		if variable_extend_list[f] == 1:

			if prototype == 'True':
				print 'void '+ ParticleClass +'GetField_'+variable_textural_name_list[f]+'('+ParticleClass+' *point,'+variable_type_list[f]+' *data);'
				continue
			

			l = 'void '+ ParticleClass +'GetField_'+variable_textural_name_list[f]+'('+ParticleClass+' *point,'+variable_type_list[f]+' *data) \n{'
			print l

			l = '  *data = point->'+variable_name_list[f]+';'
			print l
			print '}\n'
		
		else:

			if prototype == 'True':
				print 'void '+ ParticleClass +'GetField_'+variable_textural_name_list[f]+'('+ParticleClass+' *point,'+variable_type_list[f]+' *data[]);'
				continue

			l = 'void '+ ParticleClass +'GetField_'+variable_textural_name_list[f]+'('+ParticleClass+' *point,'+variable_type_list[f]+' *data[]) \n{'
			print l


			l = '  *data = point->'+variable_name_list[f]+';'
			print l
			print '}\n'
		

def write_out_setters( protoype, ParticleClass, ParticleClassShortName, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list ):

	#check length
	L = len(variable_name_list);

	if protoype == 'False':
		print '\n/* ===================================== */'
		print '/* Setters for '+ParticleClass+' */'
		print '/* ===================================== */'

	for f in xrange(L):

		if variable_extend_list[f] == 1:
			if protoype == 'True':
				print 'void '+ ParticleClass +'SetField_'+variable_textural_name_list[f]+'('+ParticleClass+' *point,'+variable_type_list[f]+' data);'
				continue

			l = 'void '+ ParticleClass +'SetField_'+variable_textural_name_list[f]+'('+ParticleClass+' *point,'+variable_type_list[f]+' data) \n{'
			print l

			l = '  point->'+variable_name_list[f]+' = data;'
			print l
			print '}\n'
		
		else:
			if protoype == 'True':
				print 'void '+ ParticleClass +'SetField_'+variable_textural_name_list[f]+'('+ParticleClass+' *point,'+variable_type_list[f]+' data[]);'
				continue

			l = 'void '+ ParticleClass +'SetField_'+variable_textural_name_list[f]+'('+ParticleClass+' *point,'+variable_type_list[f]+' data[]) \n{'
			print l


			l = '  memcpy( &point->'+variable_name_list[f]+'[0], data, sizeof('+variable_type_list[f]+')*'+str(variable_extend_list[f])+' );'
			print l
			
			print '}\n'



def write_out_SetDefaults( protoype, ClassName, ClassNameShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list ):

	#check length
	L = len(variable_name_list);


	print 'PetscErrorCode MaterialConstantsSetDefault_'+ ClassNameShort +'( \n    int nr, '+ ClassName +' _data[],'
	for f in xrange(L-1):
		print '    ' + variable_type_list[f] + ' ' +  variable_name_list[f] + ','
	print '    ' + variable_type_list[L-2] + ' ' +  variable_name_list[L-1] + ' )\n{'

	print '  ' + ClassName + ' *data = &_data[region_id];'
	print '  int r; \n'

	print '  for (r=0; r<nr; r++) {'
	
	for f in xrange(L):
		print '    data[r].' + variable_name_list[f] + ' =  ' + variable_name_list[f] + ';'
	
	print '  }\n'

	print '  PetscFunctionReturn(0);'
	print '} \n'

def write_out_SetFromOptions( protoype, ClassName, ClassNameShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list ):

	#check length
	L = len(variable_name_list);

	type   = [ 'float', 'double', 'int' ]


	print 'PetscErrorCode MaterialConstantsSetFromOptions_'+ ClassNameShort +'( const char model_name[], const int region_id, ' + ClassName +' _data[], PetscBool essential )\n{'

	print '  char                         opt_name[1024];'
	print '  PetscBool                    found;'
	print '  PetscErrorCode               ierr;\n'
	print '  ' + ClassName + ' *data = &_data[region_id];'

	for f in xrange(L):
		print '  /* options for ' + variable_textural_name_list[f] + ' ==>> ' + variable_name_list[f] + ' */'
		print '  sprintf(opt_name,"-' + variable_textural_name_list[f] + '_%d",region_id);'

		if variable_type_list[f] == 'float':
			print '  { PetscReal value;'
			print '    ierr = PetscOptionsGetReal(model_name,opt_name,&value,&found);CHKERRQ(ierr); }'
			print '    if (found) { ' + ClassName + 'SetField_' + variable_textural_name_list[f] + '(data,(float)value); }'
			print '    else if ( (!found)  && (essential) ) {'
			print '      ierr = MaterialConstantsReportParseError(model_name,"' + variable_textural_name_list[f] + '",region_id);CHKERRQ(ierr);'
			print '  }}\n'

		if variable_type_list[f] == 'double':
			print '  { PetscReal value;'
			print '    ierr = PetscOptionsGetReal(model_name,opt_name,&value,&found);CHKERRQ(ierr); }'
			print '    if (found) { ' + ClassName + 'SetField_' + variable_textural_name_list[f] + '(data,(double)value); }'
			print '    else if ( (!found)  && (essential) ) {'
			print '      ierr = MaterialConstantsReportParseError(model_name,"' + variable_textural_name_list[f] + '",region_id);CHKERRQ(ierr);'
			print '  }}\n'

		if variable_type_list[f] == 'int':
			print '  { PetscInt value;'
			print '    ierr = PetscOptionsGetInt(model_name,opt_name,&value,&found);CHKERRQ(ierr); }'
			print '    if (found) { ' + ClassName + 'SetField_' + variable_textural_name_list[f] + '(data,(int)value); }'
			print '    else if ( (!found)  && (essential) ) {'
			print '      ierr = MaterialConstantsReportParseError(model_name,"' + variable_textural_name_list[f] + '",region_id);CHKERRQ(ierr);'
			print '  }}\n'


	print '  PetscFunctionReturn(0);'
	print '} \n'



def write_out_PrintValues( protoype, ClassName, ClassNameShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list ):

	#check length
	L = len(variable_name_list);


	print 'PetscErrorCode MaterialConstantsPrintValues_'+ ClassNameShort +'( const char model_name[], const int region_id, ' + ClassName +' _data[] ) \n{'
	print '  ' + ClassName + ' *data = &_data[region_id];'
	print '  char   opt_name[1024];\n'

	for f in xrange(L):
		print '  /* options for ' + variable_textural_name_list[f] + ' ==>> ' + variable_name_list[f] + ' */'
		print '  sprintf(opt_name,"-%s'+variable_textural_name_list[f]+'_%d", model_name,region_id);'

		if variable_type_list[f] == 'float':
			print '  { float value;'
			print '    ' + ClassName + 'GetField_' + variable_textural_name_list[f]+ ',&value);'
			print '    PetscPrintf(PETSC_COMM_WORLD,"Current Value %s   :  %1.4e ", opt_name ,value); \n  }\n'

		if variable_type_list[f] == 'double':
			print '  { double value;'
			print '    ' + ClassName + 'GetField_' + variable_textural_name_list[f]+ ',&value);'
			print '    PetscPrintf(PETSC_COMM_WORLD,"Current Value %s   :  %1.4e ", opt_name ,value); \n  }\n'

		if variable_type_list[f] == 'int':
			print '  { int value;'
			print '    ' + ClassName + 'GetField_' + variable_textural_name_list[f]+ ',&value);'
			print '    PetscPrintf(PETSC_COMM_WORLD,"Current Value %s   :  %d ", opt_name ,value); \n  }\n'

	
	print '  PetscFunctionReturn(0);'
	print '} \n'


def write_out_viewer( prototype, ParticleClass, ParticleClassShortName, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list ):

	#check length
	L = len(variable_name_list);

	if prototype == 'False':
		print '\n/* ===================================== */'
		print '/* C-viewer for '+ParticleClass+' */'
		print '/* ===================================== */'

	if prototype == 'True':
		print 'void '+ParticleClass+'View('+ParticleClass+' *point);'
		return

	l = 'void '+ParticleClass+'View('+ParticleClass+' *point)\n{'
	print l
	
	type   = [ 'float', 'double', 'char', 'int', 'long int', 'short' ]
	format = [ '%1.6e', '%1.6e' ,   '%c',  '%d', '%ld',      '%d' ]
	
	
	for f in xrange(L):

		print '  {'
		if variable_extend_list[f] == 1:
			print '    '+variable_type_list[f]+' data;'
		else:
			print '    '+variable_type_list[f]+' *data;'
		
		print '    '+ParticleClass+'GetField_'+variable_textural_name_list[f]+'(point,&data);' 


		if variable_extend_list[f] == 1:

			format_i = ''
			for i in xrange(len(type)):
				if variable_type_list[f] == type[i]:
					format_i = format[i]
					break
			
			print '    printf(\"field: '+variable_textural_name_list[f]+' = '+format_i+'; [size %zu; type '+variable_type_list[f]+'; variable_name '+variable_name_list[f]+']\\n\",data, '+ParticleClass+'_member_sizes['+str(f)+'] );'
			
		else:

			format_i = ''
			for i in xrange(len(type)):
				if variable_type_list[f] == type[i]:
					format_i = format[i]
					break

			for K in xrange(variable_extend_list[f]):
				print '    printf(\"field: '+variable_textural_name_list[f]+'['+str(K)+'] = '+format_i+'; [size %zu; type '+variable_type_list[f]+'; variable_name '+variable_name_list[f]+']\\n\",data['+str(K)+'], '+ParticleClass+'_member_sizes['+str(f)+'] );'


		# close stack fram
		print '  }'


	print '}\n'
	
def write_out_c_class( ParticleClass, ParticleClassShortName, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list ):

	#check length
	L = len(variable_name_list);
	if L != len(variable_type_list):
		print 'ERROR: length variable_name_list[] != variable_name_list[]'
	if L != len(variable_textural_name_list):
		print 'ERROR: length variable_textural_name_list[] != variable_name_list[]'
	

	print '\n\n\n#error(<<REMOVED AUTOGENERATED TAG>> ================== FILE ['+ParticleClass+'_def.c] ==================)'

	# comment
	now = datetime.datetime.now()
	print '/*'
	print '  Auto generated by version 0.0 of material_constant_generator.py'
	print '  on '+ socket.gethostname() +', at '+str(now)+' by '+os.getenv('USER')
	print '*/\n\n'

	
	# safe macro
	print '#ifndef __'+ParticleClass+'_DEF_H__'
	print '#define __'+ParticleClass+'_DEF_H__\n'


	# generate struct
	print 'typedef struct {'
	for f in xrange(L):
		if variable_extend_list[f] == 1:
			print ' ', variable_type_list[f], variable_name_list[f], ';'
		else:
			print ' ', variable_type_list[f], variable_name_list[f], '[', variable_extend_list[f], '] ;'

	print '}',ParticleClass,';'
	print '\n'


	# enums #
	print 'typedef enum {'
	for f in xrange(L):
		if f == 0:
			l = '  ' + ParticleClassShortName + '_' + variable_textural_name_list[f] + ' = 0'
		else:
			l = '  ' + ParticleClassShortName + '_' + variable_textural_name_list[f]

		if f < L-1:
			l = l + ','
		print l
		
	l = '} ' + ParticleClass + 'TypeName ;'
	print l
	print '\n'


	print 'extern const char '+ParticleClass+'_classname[];\n'

	print 'extern const int ' + ParticleClass +'_nmembers;\n'
	
	print 'extern const size_t ' + ParticleClass +'_member_sizes[];\n'

	print 'extern const char *' + ParticleClass +'_member_names[];\n'


	# dump prototypes here
	print '/* prototypes */'
	write_out_getters( 'True',ParticleClass, ParticleClassShortName, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )
	write_out_setters( 'True',ParticleClass, ParticleClassShortName, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )
	write_out_viewer(  'True',ParticleClass, ParticleClassShortName, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )

	print '\n#endif'


def MATERIALPROP_CLASS_GENERATOR( ParticleClass, ParticleClassShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list ):

	# write out the header
	file = open(ParticleClass+'_def.h','w')
	sys.stdout = file
	
	write_out_c_class( ParticleClass, ParticleClassShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )

	file.close()
	sys.stdout = sys.__stdout__



	# write out the c file
	file = open(ParticleClass+'_def.c','w')
	sys.stdout = file

	write_out_c_class_externdefs( ParticleClass, ParticleClassShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )

	write_out_getters( 'False', ParticleClass, ParticleClassShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )
	write_out_setters( 'False', ParticleClass, ParticleClassShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )
	write_out_viewer( 'False', ParticleClass, ParticleClassShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )

	write_out_SetDefaults( 'False', ParticleClass, ParticleClassShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )
	write_out_SetFromOptions( 'False', ParticleClass, ParticleClassShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )
	write_out_PrintValues( 'False', ParticleClass, ParticleClassShort, variable_name_list, variable_type_list, variable_extend_list, variable_textural_name_list )

	file.close()
	sys.stdout = sys.__stdout__



# ==================================================================================
# Material constants 


def Generate_pTatin_MaterialConst_ViscosityArrh():
	ClassName      = 'MaterialConst_ViscosityArrh'
	ClassNameShort = 'ViscosityArrh'
	variable_names =          [ 'preexpA','Ascale' ,'entalpy' , 'Vmol'   ,'nexp'    ,'Tref'    ,'Eta_scale','P_scale']       
	variable_types =          [ 'double' ,'double' , 'double' , 'double' , 'int' , 'double' ,'double'   ,'double' ]
	variable_extents        = [ 1        ,      1  ,       1  , 1        , 1        ,  1       , 1         ,    1    ]
	variable_textural_names = [ 'WORDYpreexpA','WORDYAscale' ,'WORDYentalpy' , 'WORDYVmol'   ,'WORDYnexp'    ,'WORDYTref'    ,'WORDYEta_scale','WORDYP_scale']       
	variable_defaults       = [ 1.0      , 1.0     , 0.0      , 0.0      , 0        ,  0.0     , 1.0       , 1.0     ]

	MATERIALPROP_CLASS_GENERATOR( ClassName, ClassNameShort, variable_names, variable_types, variable_extents, variable_textural_names )



# Call all functions to generate all data types

## material constants ##
Generate_pTatin_MaterialConst_ViscosityArrh()

