/*
  Auto generated by version 0.0 of swarm_class_generator.py
  on otsu.local, at 2013-02-02 20:59:58.575938 by dmay
*/


#ifndef __MPntPEnergy_DEF_H__
#define __MPntPEnergy_DEF_H__

typedef struct {
  double diffusivity ;
  double heat_source ;
} MPntPEnergy ;


typedef enum {
  MPPEgy_diffusivity = 0,
  MPPEgy_heat_source
} MPntPEnergyTypeName ;


extern const char MPntPEnergy_classname[];

extern const int MPntPEnergy_nmembers;

extern const size_t MPntPEnergy_member_sizes[];

extern const char *MPntPEnergy_member_names[];

/* prototypes */
void MPntPEnergyGetField_diffusivity(MPntPEnergy *point,double *data);
void MPntPEnergyGetField_heat_source(MPntPEnergy *point,double *data);
void MPntPEnergySetField_diffusivity(MPntPEnergy *point,double data);
void MPntPEnergySetField_heat_source(MPntPEnergy *point,double data);
void MPntPEnergyView(MPntPEnergy *point);
void MPntPEnergyVTKWriteAsciiAllFields(FILE *vtk_fp,const int N,const MPntPEnergy points[]);
void MPntPEnergyPVTUWriteAllPPointDataFields(FILE *vtk_fp);
void MPntPEnergyVTKWriteBinaryAppendedHeaderAllFields(FILE *vtk_fp,int *offset,const int N,const MPntPEnergy points[]);
void MPntPEnergyVTKWriteBinaryAppendedDataAllFields(FILE *vtk_fp,const int N,const MPntPEnergy points[]);

#endif
